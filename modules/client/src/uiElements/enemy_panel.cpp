#include <uiElements/enemy_panel.h>

#include <wx/dcbuffer.h>


namespace client
{
    EnemyPanel::EnemyPanel(wxWindow *parent, reduced::Enemy &enemy) :
        wxPanel(parent, wxID_ANY, wxDefaultPosition, wxDefaultSize)
    {
        // Set a light red background color
        this->SetBackgroundStyle(wxBG_STYLE_PAINT);
        this->Bind(wxEVT_PAINT, &EnemyPanel::onPaint, this);

        wxBoxSizer *sizer = new wxBoxSizer(wxHORIZONTAL);

        // display player id
        std::string player = "Player: " + enemy.getId();
        wxStaticText *PlayerId =
                new wxStaticText(this, wxID_ANY, player, wxDefaultPosition, wxDefaultSize, wxALIGN_CENTER);

        PlayerId->SetForegroundColour(wxColor(0, 0, 0));
        sizer->Add(PlayerId, 0, wxLeft | wxRight);

        // display hand size
        std::string cards_in_hand = "Cards in Hand: " + std::to_string(enemy.getHandSize());
        wxStaticText *HandSize =
                new wxStaticText(this, wxID_ANY, cards_in_hand, wxDefaultPosition, wxDefaultSize, wxALIGN_CENTER);

        HandSize->SetForegroundColour(wxColor(0, 0, 0));
        sizer->Add(HandSize, 0, wxLeft | wxRight);

        // display draw pile size
        std::string cards_in_draw = "Cards in Draw Pile: " + std::to_string(enemy.getDrawPileSize());
        wxStaticText *DrawPileSize =
                new wxStaticText(this, wxID_ANY, cards_in_draw, wxDefaultPosition, wxDefaultSize, wxALIGN_CENTER);

        DrawPileSize->SetForegroundColour(wxColor(0, 0, 0));
        sizer->Add(DrawPileSize, 0, wxLeft | wxRight);

        // display discard pile size
        std::string cards_in_discard = "Cards in Discard Pile: " + std::to_string(enemy.getDiscardPileSize());
        wxStaticText *DiscardPileSize =
                new wxStaticText(this, wxID_ANY, cards_in_discard, wxDefaultPosition, wxDefaultSize, wxALIGN_CENTER);

        DiscardPileSize->SetForegroundColour(wxColor(0, 0, 0));
        sizer->Add(DiscardPileSize, 0, wxLeft | wxRight);

        this->SetSizer(sizer);
    }

    // generated by AI
    void EnemyPanel::onPaint(wxPaintEvent &event)
    {
        wxAutoBufferedPaintDC dc(this); // Use double-buffered drawing to prevent flickering
        dc.Clear(); // Clear the panel

        // Get the panel dimensions
        wxSize size = this->GetSize();

        // Create a rounded rectangle
        wxBrush brush(wxColour(255, 200, 200)); // Light red
        dc.SetBrush(brush);
        dc.SetPen(*wxTRANSPARENT_PEN); // No border
        dc.DrawRoundedRectangle(0, 0, size.GetWidth(), size.GetHeight(), 10); // Radius of 10 for rounded corners

        // Continue normal event processing
        event.Skip();
    }
} // namespace client
